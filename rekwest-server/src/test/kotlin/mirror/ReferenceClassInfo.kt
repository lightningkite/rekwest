//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ReferenceClassInfo: ClassInfo<Reference<*>> {

   override val kClass: KClass<Reference<*>> = Reference::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "Reference"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<Reference<*>>? = null

   object Fields {
       val id = FieldInfo<Reference<*>, com.lightningkite.mirror.archive.Id>(ReferenceClassInfo, "id", Type<com.lightningkite.mirror.archive.Id>(com.lightningkite.mirror.archive.Id::class, listOf(), false), false, { it.id as com.lightningkite.mirror.archive.Id}, listOf())
   }

   override val fields:List<FieldInfo<Reference<*>, *>> = listOf(Fields.id)

   override fun construct(map: Map<String, Any?>): Reference<com.lightningkite.mirror.archive.HasId> {
       //Gather variables
       val id:com.lightningkite.mirror.archive.Id = map["id"] as com.lightningkite.mirror.archive.Id
           //Handle the optionals
       
       //Finally do the call
       return Reference<com.lightningkite.mirror.archive.HasId>(
           id = id
       )
   }

}