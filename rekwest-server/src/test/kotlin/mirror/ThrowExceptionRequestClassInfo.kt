//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.rekwest.server

import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.rekwest.ServerFunction
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ThrowExceptionRequestClassInfo: ClassInfo<ThrowExceptionRequest> {

   override val kClass: KClass<ThrowExceptionRequest> = ThrowExceptionRequest::class
   override val modifiers: List<ClassInfo.Modifier> = listOf()

   override val implements: List<Type<*>> = listOf(Type<ServerFunction<Unit>>(ServerFunction::class, listOf(TypeProjection(Type<Unit>(Unit::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false))

   override val packageName: String = "com.lightningkite.rekwest.server"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "ThrowExceptionRequest"
   override val annotations: List<AnnotationInfo> = listOf(AnnotationInfo("@ThrowsTypes", listOf("ForbiddenException")))
   override val enumValues: List<ThrowExceptionRequest>? = null

   

   override val fields:List<FieldInfo<ThrowExceptionRequest, *>> = listOf()

   override fun construct(map: Map<String, Any?>): ThrowExceptionRequest {
       //Gather variables
       
           //Handle the optionals
       
       //Finally do the call
       return ThrowExceptionRequest(
           
       )
   }

}