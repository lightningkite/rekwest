//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.rekwest.server

import com.lightningkite.kommon.exception.ExceptionNames
import com.lightningkite.lokalize.TimeStamp
import com.lightningkite.mirror.archive.*
import com.lightningkite.mirror.info.Indexed
import com.lightningkite.mirror.info.Mutates
import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.rekwest.ServerFunction
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object UserClassInfo: ClassInfo<User> {

   override val kClass: KClass<User> = User::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf(Type<Model<Long>>(Model::class, listOf(TypeProjection(Type<Long>(Long::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false))

   override val packageName: String = "com.lightningkite.rekwest.server"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "User"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<User>? = null

   object Fields {
       val id = SerializedFieldInfo<User, Long?>(UserClassInfo, "id", Type<Long?>(Long::class, listOf(), true), false, { it.id as Long?}, listOf())
        val email = SerializedFieldInfo<User, String>(UserClassInfo, "email", Type<String>(String::class, listOf(), false), false, { it.email as String}, listOf(AnnotationInfo("Indexed", listOf())))
        val password = SerializedFieldInfo<User, String>(UserClassInfo, "password", Type<String>(String::class, listOf(), false), false, { it.password as String}, listOf())
        val role = SerializedFieldInfo<User, Role>(UserClassInfo, "role", Type<Role>(Role::class, listOf(), false), false, { it.role as Role}, listOf())
        val rejectTokensBefore = SerializedFieldInfo<User, TimeStamp>(UserClassInfo, "rejectTokensBefore", Type<TimeStamp>(TimeStamp::class, listOf(), false), false, { it.rejectTokensBefore as TimeStamp}, listOf())
   }

   override val fields:List<SerializedFieldInfo<User, *>> = listOf(Fields.id, Fields.email, Fields.password, Fields.role, Fields.rejectTokensBefore)

   override fun construct(map: Map<String, Any?>): User {
       //Gather variables
       val id:Long? = map["id"] as Long?
        val email:String = map["email"] as String
        val password:String = map["password"] as String
        val role:Role = map["role"] as Role
        val rejectTokensBefore:TimeStamp = map["rejectTokensBefore"] as TimeStamp
           //Handle the optionals
       
       //Finally do the call
       return User(
           id = id,
            email = email,
            password = password,
            role = role,
            rejectTokensBefore = rejectTokensBefore
       )
   }

}