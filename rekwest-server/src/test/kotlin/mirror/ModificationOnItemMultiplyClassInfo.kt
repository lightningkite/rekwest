//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ModificationOnItemMultiplyClassInfo: ClassInfo<ModificationOnItem.Multiply<*,*>> {

   override val kClass: KClass<ModificationOnItem.Multiply<*,*>> = ModificationOnItem.Multiply::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ModificationOnItem::class
   override val ownerName: String? = "ModificationOnItem"

   override val name: String = "Multiply"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ModificationOnItem.Multiply<*,*>>? = null

   object Fields {
       val field = SerializedFieldInfo<ModificationOnItem.Multiply<*,*>, com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any,kotlin.Number>>(ModificationOnItemMultiplyClassInfo, "field", Type<com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any,kotlin.Number>>(com.lightningkite.mirror.info.SerializedFieldInfo::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<kotlin.Number>(kotlin.Number::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any,kotlin.Number>}, listOf())
        val amount = SerializedFieldInfo<ModificationOnItem.Multiply<*,*>, kotlin.Number>(ModificationOnItemMultiplyClassInfo, "amount", Type<kotlin.Number>(kotlin.Number::class, listOf(), false), false, { it.amount as kotlin.Number}, listOf())
   }

   override val fields:List<SerializedFieldInfo<ModificationOnItem.Multiply<*,*>, *>> = listOf(Fields.field, Fields.amount)

   override fun construct(map: Map<String, Any?>): ModificationOnItem.Multiply<kotlin.Any,kotlin.Number> {
       //Gather variables
       val field:com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any,kotlin.Number> = map["field"] as com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any,kotlin.Number>
        val amount:kotlin.Number = map["amount"] as kotlin.Number
           //Handle the optionals
       
       //Finally do the call
       return ModificationOnItem.Multiply<kotlin.Any,kotlin.Number>(
           field = field,
            amount = amount
       )
   }

}