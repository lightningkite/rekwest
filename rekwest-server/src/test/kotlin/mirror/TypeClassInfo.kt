//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.info

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object TypeClassInfo: ClassInfo<Type<*>> {

   override val kClass: KClass<Type<*>> = Type::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.info"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "Type"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<Type<*>>? = null

   val fieldKClass = FieldInfo<Type<*>, kotlin.reflect.KClass<*>>(this, "kClass", Type<kotlin.reflect.KClass<*>>(kotlin.reflect.KClass::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), true), TypeProjection.Variance.STAR)), false), false, { it.kClass as kotlin.reflect.KClass<*>}, listOf())
    val fieldTypeParameters = FieldInfo<Type<*>, kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection>>(this, "typeParameters", Type<kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection>>(kotlin.collections.List::class, listOf(TypeProjection(Type<com.lightningkite.mirror.info.TypeProjection>(com.lightningkite.mirror.info.TypeProjection::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), true, { it.typeParameters as kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection>}, listOf())
    val fieldNullable = FieldInfo<Type<*>, kotlin.Boolean>(this, "nullable", Type<kotlin.Boolean>(kotlin.Boolean::class, listOf(), false), true, { it.nullable as kotlin.Boolean}, listOf())

   override val fields:List<FieldInfo<Type<*>, *>> = listOf(fieldKClass, fieldTypeParameters, fieldNullable)

   override fun construct(map: Map<String, Any?>): Type<Any?> {
       //Gather variables
       val kClass:kotlin.reflect.KClass<*> = map["kClass"] as kotlin.reflect.KClass<*>
           //Handle the optionals
       val typeParameters:kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection> = map["typeParameters"] as? kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection> ?: (fieldTypeParameters.get(Type<Any?>(kClass = kClass)) as kotlin.collections.List<com.lightningkite.mirror.info.TypeProjection>)
        val nullable:kotlin.Boolean = map["nullable"] as? kotlin.Boolean ?: (fieldNullable.get(Type<Any?>(kClass = kClass, typeParameters = typeParameters)) as kotlin.Boolean)
       //Finally do the call
       return Type<Any?>(
           kClass = kClass,
            typeParameters = typeParameters,
            nullable = nullable
       )
   }

}