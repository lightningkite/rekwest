//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.rekwest.server

import com.lightningkite.kommon.exception.ExceptionNames
import com.lightningkite.lokalize.TimeStamp
import com.lightningkite.mirror.archive.*
import com.lightningkite.mirror.info.Indexed
import com.lightningkite.mirror.info.Mutates
import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.rekwest.ServerFunction
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object UserSessionClassInfo: ClassInfo<User.Session> {

   override val kClass: KClass<User.Session> = User.Session::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.rekwest.server"
   override val owner: KClass<*>? = User::class
   override val ownerName: String? = "User"

   override val name: String = "Session"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<User.Session>? = null

   object Fields {
       val user = FieldInfo<User.Session, User>(UserSessionClassInfo, "user", Type<User>(User::class, listOf(), false), false, { it.user as User}, listOf())
        val token = FieldInfo<User.Session, String>(UserSessionClassInfo, "token", Type<String>(String::class, listOf(), false), false, { it.token as String}, listOf())
   }

   override val fields:List<FieldInfo<User.Session, *>> = listOf(Fields.user, Fields.token)

   override fun construct(map: Map<String, Any?>): User.Session {
       //Gather variables
       val user:User = map["user"] as User
        val token:String = map["token"] as String
           //Handle the optionals
       
       //Finally do the call
       return User.Session(
           user = user,
            token = token
       )
   }

}