//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemTextSearchClassInfo: ClassInfo<ConditionOnItem.TextSearch<*,*>> {

   override val kClass: KClass<ConditionOnItem.TextSearch<*,*>> = ConditionOnItem.TextSearch::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "TextSearch"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.TextSearch<*,*>>? = null

   val fieldField = FieldInfo<ConditionOnItem.TextSearch<*,*>, com.lightningkite.mirror.info.FieldInfo<kotlin.Any, kotlin.CharSequence>>(this, "field", Type<com.lightningkite.mirror.info.FieldInfo<kotlin.Any, kotlin.CharSequence>>(com.lightningkite.mirror.info.FieldInfo::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<kotlin.CharSequence>(kotlin.CharSequence::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as com.lightningkite.mirror.info.FieldInfo<kotlin.Any, kotlin.CharSequence>}, listOf())
    val fieldQuery = FieldInfo<ConditionOnItem.TextSearch<*,*>, kotlin.String>(this, "query", Type<kotlin.String>(kotlin.String::class, listOf(), false), false, { it.query as kotlin.String}, listOf())

   override val fields:List<FieldInfo<ConditionOnItem.TextSearch<*,*>, *>> = listOf(fieldField, fieldQuery)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.TextSearch<kotlin.Any, kotlin.CharSequence> {
       //Gather variables
       val field:com.lightningkite.mirror.info.FieldInfo<kotlin.Any, kotlin.CharSequence> = map["field"] as com.lightningkite.mirror.info.FieldInfo<kotlin.Any, kotlin.CharSequence>
        val query:kotlin.String = map["query"] as kotlin.String
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.TextSearch<kotlin.Any, kotlin.CharSequence>(
           field = field,
            query = query
       )
   }

}