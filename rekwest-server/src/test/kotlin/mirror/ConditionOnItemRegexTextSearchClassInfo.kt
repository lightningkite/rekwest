//Generated by Lightning Kite's Mirror plugin
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemRegexTextSearchClassInfo: ClassInfo<ConditionOnItem.RegexTextSearch<*,*>> {

   override val kClass: KClass<ConditionOnItem.RegexTextSearch<*,*>> = ConditionOnItem.RegexTextSearch::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "RegexTextSearch"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.RegexTextSearch<*,*>>? = null

   object Fields {
       val field = SerializedFieldInfo<ConditionOnItem.RegexTextSearch<*,*>, com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any, kotlin.CharSequence>>(ConditionOnItemRegexTextSearchClassInfo, "field", Type<com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any, kotlin.CharSequence>>(com.lightningkite.mirror.info.SerializedFieldInfo::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<kotlin.CharSequence>(kotlin.CharSequence::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any, kotlin.CharSequence>}, listOf())
        val query = SerializedFieldInfo<ConditionOnItem.RegexTextSearch<*,*>, kotlin.text.Regex>(ConditionOnItemRegexTextSearchClassInfo, "query", Type<kotlin.text.Regex>(kotlin.text.Regex::class, listOf(), false), false, { it.query as kotlin.text.Regex}, listOf())
   }

   override val fields:List<SerializedFieldInfo<ConditionOnItem.RegexTextSearch<*,*>, *>> = listOf(Fields.field, Fields.query)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.RegexTextSearch<kotlin.Any, kotlin.CharSequence> {
       //Gather variables
       val field:com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any, kotlin.CharSequence> = map["field"] as com.lightningkite.mirror.info.SerializedFieldInfo<kotlin.Any, kotlin.CharSequence>
        val query:kotlin.text.Regex = map["query"] as kotlin.text.Regex
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.RegexTextSearch<kotlin.Any, kotlin.CharSequence>(
           field = field,
            query = query
       )
   }

}