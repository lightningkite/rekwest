//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemOrClassInfo: ClassInfo<ConditionOnItem.Or<*>> {

   override val kClass: KClass<ConditionOnItem.Or<*>> = ConditionOnItem.Or::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "Or"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.Or<*>>? = null

   object Fields {
       val conditions = FieldInfo<ConditionOnItem.Or<*>, kotlin.collections.List<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>>(ConditionOnItemOrClassInfo, "conditions", Type<kotlin.collections.List<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>>(kotlin.collections.List::class, listOf(TypeProjection(Type<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>(com.lightningkite.mirror.archive.ConditionOnItem::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), TypeProjection.Variance.INVARIANT)), false), false, { it.conditions as kotlin.collections.List<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>}, listOf())
   }

   override val fields:List<FieldInfo<ConditionOnItem.Or<*>, *>> = listOf(Fields.conditions)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.Or<kotlin.Any> {
       //Gather variables
       val conditions:kotlin.collections.List<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>> = map["conditions"] as kotlin.collections.List<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.Or<kotlin.Any>(
           conditions = conditions
       )
   }

}