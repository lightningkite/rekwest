//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.rekwest.server

import com.lightningkite.kommon.exception.ExceptionNames
import com.lightningkite.lokalize.TimeStamp
import com.lightningkite.mirror.archive.*
import com.lightningkite.mirror.info.Indexed
import com.lightningkite.mirror.info.Mutates
import com.lightningkite.mirror.info.ThrowsTypes
import com.lightningkite.rekwest.ServerFunction
import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object UserModifyClassInfo: ClassInfo<User.Modify> {

   override val kClass: KClass<User.Modify> = User.Modify::class
   override val modifiers: List<ClassInfo.Modifier> = listOf()

   override val implements: List<Type<*>> = listOf(Type<ServerFunction<User>>(ServerFunction::class, listOf(TypeProjection(Type<User>(User::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false))

   override val packageName: String = "com.lightningkite.rekwest.server"
   override val owner: KClass<*>? = User::class
   override val ownerName: String? = "User"

   override val name: String = "Modify"
   override val annotations: List<AnnotationInfo> = listOf(AnnotationInfo("Mutates", listOf()), AnnotationInfo("ThrowsTypes", listOf(ExceptionNames.ForbiddenException, ExceptionNames.NoSuchElementException)))
   override val enumValues: List<User.Modify>? = null

   object Fields {
       val id = FieldInfo<User.Modify, Reference<User, Long>>(UserModifyClassInfo, "id", Type<Reference<User, Long>>(Reference::class, listOf(TypeProjection(Type<User>(User::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<Long>(Long::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.id as Reference<User, Long>}, listOf())
        val modifications = FieldInfo<User.Modify, List<ModificationOnItem<User, *>>>(UserModifyClassInfo, "modifications", Type<List<ModificationOnItem<User, *>>>(List::class, listOf(TypeProjection(Type<ModificationOnItem<User, *>>(ModificationOnItem::class, listOf(TypeProjection(Type<User>(User::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<Any?>(Any::class, listOf(), true), TypeProjection.Variance.STAR)), false), TypeProjection.Variance.INVARIANT)), false), false, { it.modifications as List<ModificationOnItem<User, *>>}, listOf())
   }

   override val fields:List<FieldInfo<User.Modify, *>> = listOf(Fields.id, Fields.modifications)

   override fun construct(map: Map<String, Any?>): User.Modify {
       //Gather variables
       val id:Reference<User, Long> = map["id"] as Reference<User, Long>
        val modifications:List<ModificationOnItem<User, *>> = map["modifications"] as List<ModificationOnItem<User, *>>
           //Handle the optionals
       
       //Finally do the call
       return User.Modify(
           id = id,
            modifications = modifications
       )
   }

}