//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemEqualToOneClassInfo: ClassInfo<ConditionOnItem.EqualToOne<*,*>> {

   override val kClass: KClass<ConditionOnItem.EqualToOne<*,*>> = ConditionOnItem.EqualToOne::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "EqualToOne"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.EqualToOne<*,*>>? = null

   object Fields {
       val field = FieldInfo<ConditionOnItem.EqualToOne<*,*>, com.lightningkite.mirror.info.FieldInfo<kotlin.Any, Any?>>(ConditionOnItemEqualToOneClassInfo, "field", Type<com.lightningkite.mirror.info.FieldInfo<kotlin.Any, Any?>>(com.lightningkite.mirror.info.FieldInfo::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT), TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.field as com.lightningkite.mirror.info.FieldInfo<kotlin.Any, Any?>}, listOf())
        val values = FieldInfo<ConditionOnItem.EqualToOne<*,*>, kotlin.collections.Collection<Any?>>(ConditionOnItemEqualToOneClassInfo, "values", Type<kotlin.collections.Collection<Any?>>(kotlin.collections.Collection::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.values as kotlin.collections.Collection<Any?>}, listOf())
   }

   override val fields:List<FieldInfo<ConditionOnItem.EqualToOne<*,*>, *>> = listOf(Fields.field, Fields.values)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.EqualToOne<kotlin.Any, Any?> {
       //Gather variables
       val field:com.lightningkite.mirror.info.FieldInfo<kotlin.Any, Any?> = map["field"] as com.lightningkite.mirror.info.FieldInfo<kotlin.Any, Any?>
        val values:kotlin.collections.Collection<Any?> = map["values"] as kotlin.collections.Collection<Any?>
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.EqualToOne<kotlin.Any, Any?>(
           field = field,
            values = values
       )
   }

}