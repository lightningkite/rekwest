//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.info

import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object TypeProjectionClassInfo: ClassInfo<TypeProjection> {

   override val kClass: KClass<TypeProjection> = TypeProjection::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.info"
   override val owner: KClass<*>? = null
   override val ownerName: String? = null

   override val name: String = "TypeProjection"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<TypeProjection>? = null

   val fieldType = FieldInfo<TypeProjection, com.lightningkite.mirror.info.Type<*>>(this, "type", Type<com.lightningkite.mirror.info.Type<*>>(com.lightningkite.mirror.info.Type::class, listOf(TypeProjection(Type<Any?>(Any::class, listOf(), true), TypeProjection.Variance.STAR)), false), false, { it.type as com.lightningkite.mirror.info.Type<*>}, listOf())
    val fieldVariance = FieldInfo<TypeProjection, com.lightningkite.mirror.info.TypeProjection.Variance>(this, "variance", Type<com.lightningkite.mirror.info.TypeProjection.Variance>(com.lightningkite.mirror.info.TypeProjection.Variance::class, listOf(), false), true, { it.variance as com.lightningkite.mirror.info.TypeProjection.Variance}, listOf())

   override val fields:List<FieldInfo<TypeProjection, *>> = listOf(fieldType, fieldVariance)

   override fun construct(map: Map<String, Any?>): TypeProjection {
       //Gather variables
       val type:com.lightningkite.mirror.info.Type<*> = map["type"] as com.lightningkite.mirror.info.Type<*>
           //Handle the optionals
       val variance:com.lightningkite.mirror.info.TypeProjection.Variance = map["variance"] as? com.lightningkite.mirror.info.TypeProjection.Variance ?: (fieldVariance.get(TypeProjection(type = type)) as com.lightningkite.mirror.info.TypeProjection.Variance)
       //Finally do the call
       return TypeProjection(
           type = type,
            variance = variance
       )
   }

}