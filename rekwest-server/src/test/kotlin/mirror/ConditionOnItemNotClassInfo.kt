//Generated by Lightning Kite's Mirror plugin
//AUTOMATICALLY GENERATED AND WILL BE OVERRIDDEN IF THIS MESSAGE IS PRESENT
package com.lightningkite.mirror.archive


import com.lightningkite.mirror.info.*
import kotlin.reflect.KClass

@Suppress("RemoveExplicitTypeArguments", "UNCHECKED_CAST", "USELESS_CAST")
object ConditionOnItemNotClassInfo: ClassInfo<ConditionOnItem.Not<*>> {

   override val kClass: KClass<ConditionOnItem.Not<*>> = ConditionOnItem.Not::class
   override val modifiers: List<ClassInfo.Modifier> = listOf(ClassInfo.Modifier.Data)

   override val implements: List<Type<*>> = listOf()

   override val packageName: String = "com.lightningkite.mirror.archive"
   override val owner: KClass<*>? = ConditionOnItem::class
   override val ownerName: String? = "ConditionOnItem"

   override val name: String = "Not"
   override val annotations: List<AnnotationInfo> = listOf()
   override val enumValues: List<ConditionOnItem.Not<*>>? = null

   object Fields {
       val condition = FieldInfo<ConditionOnItem.Not<*>, com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>(ConditionOnItemNotClassInfo, "condition", Type<com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>>(com.lightningkite.mirror.archive.ConditionOnItem::class, listOf(TypeProjection(Type<kotlin.Any>(kotlin.Any::class, listOf(), false), TypeProjection.Variance.INVARIANT)), false), false, { it.condition as com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>}, listOf())
   }

   override val fields:List<FieldInfo<ConditionOnItem.Not<*>, *>> = listOf(Fields.condition)

   override fun construct(map: Map<String, Any?>): ConditionOnItem.Not<kotlin.Any> {
       //Gather variables
       val condition:com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any> = map["condition"] as com.lightningkite.mirror.archive.ConditionOnItem<kotlin.Any>
           //Handle the optionals
       
       //Finally do the call
       return ConditionOnItem.Not<kotlin.Any>(
           condition = condition
       )
   }

}